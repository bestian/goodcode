(function(){"use strict";var n={2349:function(n,e,r){var t=r(9242),o=r(3396);function a(n,e){const r=(0,o.up)("router-link"),t=(0,o.up)("router-view");return(0,o.wg)(),(0,o.iD)(o.HY,null,[(0,o._)("nav",null,[(0,o.Wm)(r,{to:"/"},{default:(0,o.w5)((()=>[(0,o.Uk)("Home")])),_:1}),(0,o.Uk)(" | "),(0,o.Wm)(r,{to:"/about"},{default:(0,o.w5)((()=>[(0,o.Uk)("About")])),_:1})]),(0,o.Wm)(t)],64)}var i=r(89);const u={},c=(0,i.Z)(u,[["render",a]]);var s=c,l=r(5431);(0,l.z)("/goodcode/service-worker.js",{ready(){console.log("App is being served from cache by a service worker.\nFor more details, visit https://goo.gl/AFskqB")},registered(){console.log("Service worker has been registered.")},cached(){console.log("Content has been cached for offline use.")},updatefound(){console.log("New content is downloading.")},updated(){console.log("New content is available; please refresh."),location.reload(!0)},offline(){console.log("No internet connection found. App is running in offline mode.")},error(n){console.error("Error during service worker registration:",n)}});var d=r(2483);const p={class:"home"};function f(n,e,r,t,a,i){const u=(0,o.up)("HelloWorld");return(0,o.wg)(),(0,o.iD)("div",p,[(0,o.Wm)(u,{msg:"Welcome to Your Vue.js App"})])}const v={class:"hello ui segment container"},g=(0,o.uE)('<h3 class="ui header" data-v-6271313e>簡介</h3><p data-v-6271313e> 一般的程式課想去教你一些食譜，要做這個功能可以這樣寫、要做那個功能可以讓寫等等。 </p><p data-v-6271313e> 但是我們現在要學的是如何用不同的方式寫同樣的程式、並且從中取捨圖你對喜歡的品味以及最容易修正錯誤的簡潔俐落寫法。 </p><p data-v-6271313e> 例如，我們現在不是要學怎麼做一鍋為正湯，是怎麼去救煮的太鹹的味增湯。 </p><p data-v-6271313e> 要做一件事總是有很多方法，但不是每一種方法都一樣好。 </p><p data-v-6271313e> 有的時候不是寫得越少越好。 </p><p data-v-6271313e> 原則上只要重複了三次的程式碼就應該獨立抽出來變成一個函式。 </p><p data-v-6271313e> 麻瓜也能欣賞的程式設計。 </p><p data-v-6271313e> 講授教學大綱如下： 1. 什麼是簡潔漂亮的程式 * 定義簡潔漂亮的程式，並舉例說明。 * 說明簡潔漂亮的程式可以提高程式的可讀性和可維護性。 2. 如何寫出簡潔漂亮的程式 * 提供一些基本技巧，例如使用簡潔的變量名稱、適當地縮排、使用註釋等。 * 說明如何運用程式設計原則，例如單一職責原則、開放封閉原則、依賴反轉原則等，來寫出簡潔漂亮的程式。 3. 持續提升品味 * 說明如何通過閱讀其他人的代碼、參與社區討論、和同行交流等方式來持續提升程式品味。 * 提供一些測驗和練習題，讓學員可以實際應用所學知識，鞏固所學內容。 </p><p data-v-6271313e> 使用簡潔的變量名稱是寫出簡潔漂亮的程式的一個基本技巧。適當地選擇變量名稱可以使程式更容易讀懂，並提高程式的可讀性和可維護性。 </p><p data-v-6271313e> 例如，對於一個計算圓面積的函數，使用變量名稱 radius 表示圓的半徑比使用變量名稱 r 更容易讀懂。另外，避免使用模糊不清的變量名稱，例如 temp 或 a 等。 </p><p data-v-6271313e> 總之，選擇適當的變量名稱是寫出簡潔漂亮的程式的重要技巧，可以使程式更容易讀懂，並提高程式的可讀性和可維護性。 </p><p data-v-6271313e> 單一職責原則（Single Responsibility Principle，SRP）指的是一個模塊（類、函數、類方法等）只負責一項職責，不應該承擔多項職責。 例如，一個函數 calculateArea 計算圓面積時，只應該負責計算圓面積，不應該負責輸出計算結果。如果在函數中還負責輸出結果，就違反了單一職責原則。 </p><pre data-v-6271313e>    // 違反單一職責原則\n    function calculateArea(radius) {\n      const area = Math.PI * radius * radius;\n      console.log(`半徑為 ${radius} 的圓面積為 ${area}`);\n      return area;\n    }\n    </pre><p data-v-6271313e> 下面是一個遵循單一職責原則的例子： </p><pre data-v-6271313e>    // 遵循單一職責原則\n    function calculateArea(radius) {\n      return Math.PI * radius * radius;\n    }\n\n    function printArea(radius) {\n      const area = calculateArea(radius);\n      console.log(`半徑為 ${radius} 的圓面積為 ${area}`);\n    }\n\n    </pre><p data-v-6271313e> 總之，遵循單一職責原則可以使程式更容易讀懂，並提高程式的可維護性。 </p><p data-v-6271313e> 開放封閉原則（Open/Closed Principle，OCP）指的是一個模塊應該對擴展開放，對修改關閉。例如，一個類表示一個图形，它應該允許添加新的图形類型，但不應該修改已有的图形類型。 </p><pre data-v-6271313e>    // 違反開放封閉原則\n    class Shape {\n      draw() {\n        // 绘制图形\n      }\n    }\n\n    // 新增一种图形需要修改 Shape 類\n    class Triangle extends Shape {\n      draw() {\n        // 绘制三角形\n      }\n    }\n    </pre><p data-v-6271313e> 下面是一個遵循開放封閉原則的例子： </p><pre data-v-6271313e>    // 遵循開放封閉原則\n    class Shape {\n      draw() {\n        throw new Error(&#39;必须在子類中實現 draw 方法&#39;);\n      }\n    }\n\n    // 新增一种图形只需要添加新的類\n    class Triangle extends Shape {\n      draw() {\n        // 绘制三角形\n      }\n    }\n    </pre><p data-v-6271313e> 總之，遵循開放封閉原則可以使程式更容易擴展，並提高程式的可維護性。 </p><p data-v-6271313e> 依賴反轉原則（Dependency Inversion Principle，DIP）指的是高層模塊不應該依賴低層模塊，二者都應該依賴抽象。例如，一個排序類只應該依賴排序接口，而不應該依賴具體的排序實現。 </p><pre data-v-6271313e>    // 違反依賴反轉原則\n    class Sorter {\n      constructor(arr) {\n        this.arr = arr;\n      }\n\n      sort() {\n        // 使用具體的排序實現\n        return this.arr.sort((a, b) =&gt; a - b);\n      }\n    }\n    </pre><p data-v-6271313e> 下面是一個遵循依賴反轉原則的例子： </p><pre data-v-6271313e>    // 遵循依賴反轉原則\n    class Sorter {\n      constructor(arr, comparator) {\n        this.arr = arr;\n        this.comparator = comparator;\n      }\n\n      sort() {\n        return this.arr.sort(this.comparator);\n      }\n    }\n\n    const sorter = new Sorter([1, 2, 3], (a, b) =&gt; a - b);\n    sorter.sort();\n    </pre><p data-v-6271313e> 總之，遵循依賴反轉原則可以使程式更容易測試和維護。 </p><p data-v-6271313e> 要寫出簡潔的好程式，需要把握的七項原則包括： 1. 明確定義目標：確保程式有明確的目的，並能夠滿足需求。 2. 遵循一致的命名慣例：使用易於理解和記憶的名稱來表示程式中的物件和變量。 3. 撰寫清晰的代碼：使用易於理解的代碼撰寫方式，避免混淆和錯誤。 4. 劃分功能：将程式拆分成較小的、功能單獨的部分，以便於維護和擴展。 5. 遵循邏輯性：程式應該按照一定的邏輯順序來執行，使程式更容易理解和維護。 6. 注釋代碼：為程式添加註釋，以便了解代碼的用途和運作方式。 7. 優化代碼：對程式進行優化，以提高效率和性能。 </p><p data-v-6271313e> 常犯的程式設計錯誤包括: 1. 沒有明確定義目標：程式沒有明確的目的，無法滿足需求。 2. 命名不一致：使用不一致的名稱來表示程式中的物件和變量，使程式難以理解和維護。 3. 代碼混亂：使用難以理解的代碼撰寫方式，容易造成混淆和錯誤。 4. 缺少註釋：沒有添加註釋，使程式的用途和運作方式難以理解。 </p><p data-v-6271313e> 下面是一個簡單的程式碼示例，用來說明這四種錯誤: </p><pre data-v-6271313e>    // 第一種錯誤：沒有明確定義目標\n    function calculate() {\n      // 程式的目的不清晰，無法確定該函數的用途\n    }\n\n    // 第二種錯誤：命名不一致\n    let x = 5;\n    let y = 10;\n    let result = x + y;\n\n    // 第三種錯誤：代碼混亂\n    if (result &gt; 10) {\n      console.log(&quot;大於十&quot;);\n    } else {\n      console.log(&quot;小於等於十&quot;);\n    }\n\n    // 第四種錯誤：缺少註釋\n    function add(a, b) {\n      // 沒有註釋說明函數的用途和運作方式\n      return a + b;\n    }\n    </pre><p data-v-6271313e> 通過改進程式碼，可以避免這些錯誤: </p><pre data-v-6271313e>    // 明確定義目標\n    function calculate(a, b) {\n      // 計算兩個數字的和\n      return a + b;\n    }\n\n    // 遵循一致的命名\n    let num1 = 5;\n    let num2 = 10;\n    let sum = calculate(num1, num2);\n\n    // 撰寫清晰的代碼\n    if (sum &gt; 10) {\n      console.log(&quot;大於十&quot;);\n    } else {\n      console.log(&quot;小於等於十&quot;);\n    }\n\n    // 添加註釋\n    function add(a, b) {\n      // 計算兩個數字的和\n      return a + b;\n    }\n    </pre>',33),h=[g];function m(n,e,r,t,a,i){return(0,o.wg)(),(0,o.iD)("div",v,h)}var b={name:"HelloWorld",props:{msg:String}};const w=(0,i.Z)(b,[["render",m],["__scopeId","data-v-6271313e"]]);var y=w,k={name:"HomeView",components:{HelloWorld:y}};const O=(0,i.Z)(k,[["render",f]]);var S=O;const P=[{path:"/",name:"home",component:S},{path:"/about",name:"about",component:()=>r.e(443).then(r.bind(r,7381))}],j=(0,d.p7)({history:(0,d.PO)("/goodcode/"),routes:P});var A=j;(0,t.ri)(s).use(A).mount("#app")}},e={};function r(t){var o=e[t];if(void 0!==o)return o.exports;var a=e[t]={exports:{}};return n[t](a,a.exports,r),a.exports}r.m=n,function(){var n=[];r.O=function(e,t,o,a){if(!t){var i=1/0;for(l=0;l<n.length;l++){t=n[l][0],o=n[l][1],a=n[l][2];for(var u=!0,c=0;c<t.length;c++)(!1&a||i>=a)&&Object.keys(r.O).every((function(n){return r.O[n](t[c])}))?t.splice(c--,1):(u=!1,a<i&&(i=a));if(u){n.splice(l--,1);var s=o();void 0!==s&&(e=s)}}return e}a=a||0;for(var l=n.length;l>0&&n[l-1][2]>a;l--)n[l]=n[l-1];n[l]=[t,o,a]}}(),function(){r.n=function(n){var e=n&&n.__esModule?function(){return n["default"]}:function(){return n};return r.d(e,{a:e}),e}}(),function(){r.d=function(n,e){for(var t in e)r.o(e,t)&&!r.o(n,t)&&Object.defineProperty(n,t,{enumerable:!0,get:e[t]})}}(),function(){r.f={},r.e=function(n){return Promise.all(Object.keys(r.f).reduce((function(e,t){return r.f[t](n,e),e}),[]))}}(),function(){r.u=function(n){return"js/about.e91b4c86.js"}}(),function(){r.miniCssF=function(n){}}(),function(){r.g=function(){if("object"===typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"===typeof window)return window}}()}(),function(){r.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)}}(),function(){var n={},e="goodcode:";r.l=function(t,o,a,i){if(n[t])n[t].push(o);else{var u,c;if(void 0!==a)for(var s=document.getElementsByTagName("script"),l=0;l<s.length;l++){var d=s[l];if(d.getAttribute("src")==t||d.getAttribute("data-webpack")==e+a){u=d;break}}u||(c=!0,u=document.createElement("script"),u.charset="utf-8",u.timeout=120,r.nc&&u.setAttribute("nonce",r.nc),u.setAttribute("data-webpack",e+a),u.src=t),n[t]=[o];var p=function(e,r){u.onerror=u.onload=null,clearTimeout(f);var o=n[t];if(delete n[t],u.parentNode&&u.parentNode.removeChild(u),o&&o.forEach((function(n){return n(r)})),e)return e(r)},f=setTimeout(p.bind(null,void 0,{type:"timeout",target:u}),12e4);u.onerror=p.bind(null,u.onerror),u.onload=p.bind(null,u.onload),c&&document.head.appendChild(u)}}}(),function(){r.r=function(n){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})}}(),function(){r.p="/goodcode/"}(),function(){var n={143:0};r.f.j=function(e,t){var o=r.o(n,e)?n[e]:void 0;if(0!==o)if(o)t.push(o[2]);else{var a=new Promise((function(r,t){o=n[e]=[r,t]}));t.push(o[2]=a);var i=r.p+r.u(e),u=new Error,c=function(t){if(r.o(n,e)&&(o=n[e],0!==o&&(n[e]=void 0),o)){var a=t&&("load"===t.type?"missing":t.type),i=t&&t.target&&t.target.src;u.message="Loading chunk "+e+" failed.\n("+a+": "+i+")",u.name="ChunkLoadError",u.type=a,u.request=i,o[1](u)}};r.l(i,c,"chunk-"+e,e)}},r.O.j=function(e){return 0===n[e]};var e=function(e,t){var o,a,i=t[0],u=t[1],c=t[2],s=0;if(i.some((function(e){return 0!==n[e]}))){for(o in u)r.o(u,o)&&(r.m[o]=u[o]);if(c)var l=c(r)}for(e&&e(t);s<i.length;s++)a=i[s],r.o(n,a)&&n[a]&&n[a][0](),n[a]=0;return r.O(l)},t=self["webpackChunkgoodcode"]=self["webpackChunkgoodcode"]||[];t.forEach(e.bind(null,0)),t.push=e.bind(null,t.push.bind(t))}();var t=r.O(void 0,[998],(function(){return r(2349)}));t=r.O(t)})();
//# sourceMappingURL=app.1a1819c1.js.map